#!/usr/bin/perl

require "./stats/tag2date.pm";

my %authors;

sub num {
    my ($t)=@_;
    if($t =~ /^curl-(\d)_(\d+)_(\d+)/) {
        return 10000*$1 + 100*$2 + $3;
    }
    elsif($t =~ /^curl-(\d)_(\d+)/) {
        return 10000*$1 + 100*$2;
    }
}


sub sortthem {
    return num($a) <=> num($b);
}

@alltags= `git tag -l`;

foreach my $t (@alltags) {
    chomp $t;
    if($t =~ /^curl-([0-9_]*[0-9])\z/) {
        push @releases, $t;
    }
}


sub singlefile {
    my ($tag, $f) = @_;
    open(G, "git blame -CCC --line-porcelain $f $tag|");
    my $author;
    while(<G>) {
        if(/^author (.*)/) {
            $authors{$1}++;    # per this tag
        }
    }
    close(G);
}

sub show {
    my ($tag, $date) = @_;
    my @f=`git ls-tree -r --name-only $tag -- src lib include 2>/dev/null`;

    for my $e (@f) {
        chomp $e;
        if(($e =~ /\.[ch]\z/) || ($e =~ /makefile/i)) {
            singlefile($tag, $e);
        }
    }

    # number of people with code left
    printf "$date;%u\n", scalar(%authors);
    undef %authors;
}

print <<CACHE
2000-03-14;1
2000-03-21;1
2000-03-21;1
2000-08-21;1
2000-08-30;1
2000-09-28;1
2000-10-16;1
2000-12-04;1
2001-01-05;1
2001-01-27;1
2001-02-13;1
2001-03-22;1
2001-04-04;1
2001-04-23;1
2001-05-07;1
2001-06-07;2
2001-08-20;3
2001-09-25;3
2001-11-04;3
2001-12-05;3
2002-01-23;3
2002-02-05;3
2002-03-07;3
2002-04-15;3
2002-05-13;3
2002-06-13;3
2002-10-01;4
2002-10-11;4
2002-11-18;4
2003-01-14;5
2003-04-02;5
2003-05-19;5
2003-07-28;5
2003-08-15;5
2003-11-01;5
2004-01-22;5
2004-03-18;5
2004-04-26;5
2004-06-02;5
2004-08-10;6
2004-10-18;7
2004-12-20;8
2005-02-01;8
2005-03-04;8
2005-04-05;8
2005-05-16;9
2005-09-01;9
2005-10-13;9
2005-12-06;9
2006-02-27;10
2006-03-20;10
2006-06-12;10
2006-08-07;10
2006-10-29;10
2007-01-29;11
2007-04-11;11
2007-06-25;12
2007-07-10;12
2007-09-13;13
2007-10-29;13
2008-01-28;13
2008-03-30;14
2008-06-04;14
2008-09-01;14
2008-11-05;14
2008-11-13;14
2009-01-19;14
2009-03-02;14
2009-05-18;14
2009-08-12;15
2009-11-04;15
2010-02-09;17
2010-04-14;23
2010-06-16;34
2010-08-11;39
2010-10-12;42
2010-12-15;48
2011-02-17;59
2011-04-17;68
2011-04-22;69
2011-06-23;73
2011-09-13;80
2011-11-14;83
2011-11-17;83
2012-01-24;94
2012-03-22;97
2012-05-24;101
2012-07-27;104
2012-10-10;107
2012-11-20;113
2013-02-06;118
2013-04-12;128
2013-06-22;132
2013-08-11;132
2013-10-13;138
2013-12-16;144
2014-01-29;150
2014-03-26;159
2014-05-20;162
2014-07-16;170
2014-09-10;180
2014-11-05;187
2015-01-07;191
2015-02-25;196
2015-04-22;201
2015-04-28;201
2015-06-17;208
2015-08-11;210
2015-10-07;217
2015-12-01;225
2016-01-27;228
2016-02-08;228
2016-03-23;236
2016-05-17;245
2016-05-30;245
2016-07-21;251
2016-08-03;252
2016-09-07;259
2016-09-14;260
2016-11-02;264
2016-12-20;267
2016-12-22;267
2017-02-22;276
2017-02-24;277
2017-04-19;286
2017-06-14;289
2017-08-09;293
2017-08-13;298
2017-10-04;299
2017-10-23;302
2017-11-29;304
2018-01-23;315
2018-03-13;321
2018-05-15;339
2018-07-11;350
2018-09-04;359
2018-10-30;367
2018-12-12;374
2019-02-06;382
2019-03-27;384
2019-05-22;392
2019-06-04;395
2019-07-17;398
2019-07-19;398
2019-09-10;407
2019-11-05;422
2020-01-08;428
2020-03-04;432
2020-03-11;433
2020-04-29;435
2020-06-23;441
2020-06-30;441
2020-08-19;449
2020-10-14;459
2020-12-09;461
2021-02-03;469
2021-03-31;476
2021-04-14;478
2021-05-26;484
2021-07-21;502
2021-09-14;512
2021-09-22;511
2021-11-10;527
2022-01-05;533
2022-03-05;542
2022-04-27;548
2022-05-11;551
2022-06-27;562
2022-08-31;576
2022-10-26;581
2022-12-21;590
2023-02-15;588
2023-02-20;587
2023-03-20;585
2023-03-20;585
2023-05-17;589
2023-05-23;593
2023-05-30;593
2023-07-19;601
2023-07-26;602
2023-09-13;607
2023-10-11;610
2023-12-06;618
2024-01-31;619
2024-03-27;623
2024-03-27;623
CACHE
    ;

foreach my $t (sort sortthem @releases) {
    if(num($t) <= 80701) {
        next;
    }
    my $d = tag2date($t);
    show($t, $d);
}
